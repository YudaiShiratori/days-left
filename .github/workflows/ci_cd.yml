name: Run Tests and Lint

on:
  push:
    branches: ["**"] # すべてのブランチでのプッシュをトリガー
  # pull_request:
  #   branches: ["**"] # すべてのブランチへのプルリクエストをトリガー

# 明示的なパーミッション設定
permissions:
  contents: write # リポジトリコンテンツの書き込み権限（自動コミット用）
  issues: write
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # 変更履歴を取得するために必要
          fetch-depth: 0
          # ワークフローをトリガーしたブランチをチェックアウト
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Bun
        run: npm install -g bun

      - name: Install dependencies
        run: bun install

      - name: Run formatter
        run: |
          set -e
          echo "Running formatter..."
          bun run check:write
        # エラーが発生した場合、ワークフローは停止します

      - name: Commit format changes if any
        run: |
          # 変更があるか確認
          if [[ -n "$(git status --porcelain)" ]]; then
            git config --local user.name "github-actions[bot]"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "style: apply automatic formatting"
            
            # リモートの変更を取得してからプッシュを試みる
            git pull --rebase origin ${{ github.head_ref || github.ref_name }}
            git push
            echo "Changes committed and pushed"
          else
            echo "No changes to commit"
          fi

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Bun
        run: npm install -g bun

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun run test

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Bun
        run: npm install -g bun

      - name: Install dependencies
        run: bun install

      - name: Install Playwright browsers
        run: bunx playwright install --with-deps

      - name: Run E2E tests
        run: bun run test:e2e:ci
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

#   # Deploy to Vercel Preview for non-main branches
#   deploy_preview:
#     name: Deploy to Vercel Preview
#     runs-on: ubuntu-latest
#     needs: test
#     if: ${{ github.ref_name != 'main' }}
#     env:
#       VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#       VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#       VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#       - name: Install Bun
#         run: npm install -g bun
#       - name: Install Vercel CLI
#         run: npm install --global vercel@latest
#       - name: Pull Vercel Environment
#         run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
#       - name: Build project artifacts
#         run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
#       - name: Deploy to Vercel Preview
#         id: deploy
#         run: |
#           # Deploy to Vercel and capture output
#           DEPLOY_OUTPUT=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
#           echo "$DEPLOY_OUTPUT"
#           # Extract the last preview URL from output
#           PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^ ]*vercel.app' | tail -n1)
#           echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
#       - name: Comment preview URL on PR
#         uses: actions/github-script@v6
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             // Find open PR for the current branch
#             const { data: prs } = await github.rest.pulls.list({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               state: 'open',
#               head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
#             });
#             const prNumber = prs[0]?.number;
#             if (prNumber) {
#               // Post a comment with the preview URL
#               await github.rest.issues.createComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 issue_number: prNumber,
#                 body: `🔔 Preview Deployment: ${{ steps.deploy.outputs.preview_url }}`
#               });
#             }

#   # Deploy to Vercel Production for main branch
#   deploy_production:
#     name: Deploy to Vercel Production
#     runs-on: ubuntu-latest
#     needs: test
#     if: ${{ github.ref_name == 'main' }}
#     env:
#       VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#       VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#       VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20.x'
#       - name: Install Bun
#         run: npm install -g bun
#       - name: Install Vercel CLI
#         run: npm install --global vercel@latest
#       - name: Pull Vercel Environment
#         run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
#       - name: Build project artifacts
#         run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
#       - name: Deploy to Vercel Production
#         run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
